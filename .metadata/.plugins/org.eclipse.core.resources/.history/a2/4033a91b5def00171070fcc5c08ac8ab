/**
 * 
 */
package com.abhishek.code;

/**
 * @author Abhishek
 *
 */
public class LongestPalindromicSubstring {

	/**
	 * @param args
	 */
	public static void main(String[] args) {

	}
	
	public static String longestPalindromicSubseqDP(String input) {
		if(input == null || input.length() <= 1) {
			return input;
		}
		int len = input.length();
		boolean dpTable [][] = new boolean[len][len];
		for(int l=0;l<=len;l++) {
			for(int i=0;i<len-l;i++) {
				int j = i+l-1;
				if(input.charAt(i) == input.charAt(j) && l==2) {
					dpTable[i][j] = 2;
				}else if(input.charAt(i) == input.charAt(j)) {
					dpTable[i][j] = dpTable[i+1][j-1] + 2;
				}else {
					dpTable[i][j] = max(dpTable[i+1][j], dpTable[i][j-1]);
				}
			}
		}
		for(int i=0;i<len;i++) {
			System.out.println("");
			for(int j=0;j<len;j++) {
				System.out.print(" "+dpTable[i][j]);
			}
		}
		System.out.print(" Length of longest palindromic subseq : "+dpTable[0][len-1]);
		return dpTable[0][len-1];
	}

}
